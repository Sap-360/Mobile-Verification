var should     = require("should"); 
var assert     = require("assert");
var autho      = require("../index");

var tests      = {};
autho.certPath = "cert.txt";
 
describe("node-autho", function(){

  it("should hash a given string with bcrypt", function(done){
    autho.encryptPassword("the quick brown fox").then(function(hash){
      tests.bpass = hash;
      if(tests.bpass.length >= 59){
        done();
      }
    });
  });
  
  it("should successfully compare the previous string with a bcrypt hash", function(done){
    autho.comparePassword("the quick brown fox", tests.bpass).then(function(){
      done();
    });
  });
  
  it("should fail at comparing an invalid string with the previous hash", function(done){
    autho.comparePassword("the quick brown foe", tests.bpass).then(function(){
      
    },
    function(){
      done();
    });
  });
  
  it("should encrypt a string with a plain key as a param", function(done){
    tests.estr = autho.encrypt("the quick brown fox something else here an extra long string", "foo");
    if(tests.estr.length >= 16){
      done();
    }
  });
  
  it("should decrypt the previous hash with a plain key as a param", function(done){
    tests.dstr = autho.decrypt(tests.estr, "foo");
    if(tests.dstr === "the quick brown fox something else here an extra long string"){
      done();
    }
  });
  
  it("should fail to decrypt the previous hash with an invalid key", function(done){
    tests.dstr = autho.decrypt(tests.estr, "foe");
    if(tests.dstr !== "the quick brown fox something else here an extra long string"){
      done();
    }
  });
  
  it("should encrypt a string with a key on the server", function(done){
    autho.encrypt("the quick brown fox").then(function(hash){
      tests.fstr = hash;
      if(tests.fstr.length >= 16){
        done();
      }
    });
  });
  
  it("should decrypt the previous string from a key on the server", function(done){
    autho.decrypt(tests.fstr).then(function(res){
      if(res === "the quick brown fox"){
        done();
      }
    });
  });

});
  
